trigger:
  branches:
    include:
      - main
  paths:
    include:
      - Samuel/Samuel/plugins/**/*.py

pool:
  name: 'Self-hosted'

jobs:
  - job: DetectChanges
    steps:
      - checkout: self
        fetchDepth: 0  # Fetch full Git history
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
      - powershell: |
          # Get files changed in the latest commit
          $changedFiles = git diff --name-only HEAD HEAD~1
          # Filter to .py files in Samuel/Samuel/plugins/
          $filteredFiles = $changedFiles | Where-Object { $_ -match '^Samuel/Samuel/plugins/.*\.py$' }
          if (-not $filteredFiles) {
              Write-Host "No matching .py files found in Samuel/Samuel/plugins/."
              exit 0
          }
          # Pass each full file path to the Python script
          foreach ($file in $filteredFiles) {
              if ($file) {
                  Write-Host "Processing file: $file"
                  python samreglib/utils/regressionTest/getMethodeTest.py $file
                  if ($LASTEXITCODE -ne 0) {
                      Write-Error "Python script failed for file: $file"
                      exit 1
                  }
              }
          }
        displayName: 'Run script for each changed .py file'

import sys
import os

def extract_folder(file_path):
    # Split the path using the OS-specific separator
    parts = file_path.split(os.sep)
    # Find the 'plugins' directory and get the next part as the folder name
    try:
        plugins_index = parts.index('plugins')
        if plugins_index + 1 < len(parts):
            return parts[plugins_index + 1]
    except ValueError:
        pass
    return None

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: No file path provided")
        sys.exit(1)
    
    file_path = sys.argv[1]
    folder = extract_folder(file_path)
    if folder:
        print(f"Extracted folder: {folder}")
        # Add your existing logic here using the folder name
    else:
        print("Error: Could not extract folder from path")
        sys.exit(1)
