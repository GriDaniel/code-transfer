import json
import os
import xmltodict

def extract_attributes(data_dict):
    """
    Extract attributes from 'SLOPE' and 'RESULT' found anywhere within 'extractedOutput'.
    
    Args:
        data_dict (dict): Dictionary from JSON or XML data.
    
    Returns:
        dict: Combined attributes from 'SLOPE' and 'RESULT'.
    """
    def find_keys(data, target_keys):
        """
        Recursively search for target keys in a nested dictionary or list.
        
        Args:
            data: Dictionary, list, or value to search.
            target_keys: Set of keys to find (e.g., {'SLOPE', 'RESULT'}).
        
        Returns:
            dict: Dictionary of found keys and their values.
        """
        found = {}
        if isinstance(data, dict):
            for key, value in data.items():
                if key in target_keys:
                    # Store the value (could be dict or list)
                    found[key] = value
                else:
                    # Recursively search nested dictionaries
                    nested_found = find_keys(value, target_keys)
                    found.update(nested_found)
        elif isinstance(data, list):
            # Search through lists
            for item in data:
                nested_found = find_keys(item, target_keys)
                found.update(nested_found)
        return found

  def extract_dict(data):
     """
     Extract dictionaries from data, handling lists or non-dict cases.
     Excludes '#text' keys.
     
     Args:
         data: Dictionary, list, or other type.
     
     Returns:
         list: List of extracted dictionaries.
     """
     result = []
     if isinstance(data, dict):
         filtered = {k: v for k, v in data.items() if k != "#text"}  # Filter '#text'
         if filtered:
             result.append(filtered)
     elif isinstance(data, list):
         for item in data:
             if isinstance(item, dict):
                 filtered = {k: v for k, v in item.items() if k != "#text"}  # Filter '#text'
                 if filtered:
                     result.append(filtered)
     return result

    extracted_output = data_dict.get("extractedOutput", {})
    target_keys = {"SLOPE", "RESULT"}
    found_keys = find_keys(extracted_output, target_keys)
    
    # Extract dictionaries from SLOPE and RESULT
    slope = extract_dict(found_keys.get("SLOPE", {}))
    result = extract_dict(found_keys.get("RESULT", {}))
    
    # Combine attributes, ensuring both are dictionaries
    return {**slope, **result}

def get_data_reference(json_files, plugin):
    """
    Read JSON files from samreglib/testData/<plugin>/<file_path> and extract attributes.
    
    Args:
        json_files (list): List of file paths relative to the plugin directory.
        plugin (str): Name of the plugin to determine the directory.
    
    Returns:
        list: List of dictionaries with attributes per file.
    
    Raises:
        FileNotFoundError: If a file is not found at the constructed path.
        JSONDecodeError: If a file contains invalid JSON.
    """
    base_dir = os.path.join('samreglib', 'testData', plugin)
    ref_data = []
    for file_path in json_files:
        full_path = os.path.join(base_dir, file_path)
        try:
            with open(full_path, 'r') as f:
                data = json.load(f)
            attributes = extract_attributes(data)
            ref_data.append(attributes)
        except FileNotFoundError:
            print(f"File not found: {full_path}")
            raise
        except json.JSONDecodeError:
            print(f"Invalid JSON in file: {full_path}")
            raise
    return ref_data

def get_data_output(xml_strings):
    """
    Parse a list of XML strings and extract attributes from each.
    
    Args:
        xml_strings (list): List of XML strings to process.
    
    Returns:
        list: List of dictionaries with attributes per XML string.
    """
    out_data = []
    for xml_string in xml_strings:
        try:
            data = xmltodict.parse(xml_string)
            attributes = extract_attributes(data)
            out_data.append(attributes)
        except xmltodict.expat.ExpatError:
            print(f"Invalid XML string: {xml_string[:50]}...")  # Show start of string
            raise
    return out_data
