private Dictionary<string, object> TransformResultKeys(BsonDocument doc)
{
    var result = new Dictionary<string, object>();
    var reverseMapping = _fieldMappings.ToDictionary(x => x.Value, x => x.Key);

    // Debug the input document
    Console.WriteLine($"Processing document: {doc.ToJson()}");

    // Handle all direct and nested fields
    foreach (var element in doc.Elements)
    {
        Console.WriteLine($"Processing element: {element.Name}");

        // Check if we have a reverse mapping for this field
        if (reverseMapping.TryGetValue(element.Name, out string uiColumnName))
        {
            result[uiColumnName] = BsonExtensions.BsonValueToObject(element.Value);
            Console.WriteLine($"Mapped {element.Name} to {uiColumnName}");
        }
        else
        {
            // Handle possible nested field projections (when a dot notation field is projected)
            bool isNestedField = false;
            foreach (var mapping in _fieldMappings)
            {
                if (mapping.Value.Contains('.') && element.Name == mapping.Value)
                {
                    result[mapping.Key] = BsonExtensions.BsonValueToObject(element.Value);
                    isNestedField = true;
                    Console.WriteLine($"Mapped nested field {element.Name} to {mapping.Key}");
                    break;
                }
            }

            // If not a mapped nested field, use as is
            if (!isNestedField)
            {
                result[element.Name] = BsonExtensions.BsonValueToObject(element.Value);
            }
        }
    }

    // Handle the special case of nested fields that might be in the document
    foreach (var mapping in _fieldMappings)
    {
        if (mapping.Value.Contains('.'))
        {
            var parts = mapping.Value.Split('.');
            if (doc.Contains(parts[0]) && doc[parts[0]].IsBsonDocument)
            {
                var nestedDoc = doc[parts[0]].AsBsonDocument;
                if (nestedDoc.Contains(parts[1]))
                {
                    result[mapping.Key] = BsonExtensions.BsonValueToObject(nestedDoc[parts[1]]);
                    Console.WriteLine($"Extracted nested value {parts[0]}.{parts[1]} to {mapping.Key}");
                }
            }
        }
    }

    // Handle JobDuration calculation if not already handled by MongoDB projection
    // This serves as a fallback if StartTime and EndTime fields are present but Duration wasn't calculated
    if (!result.ContainsKey("Duration") && doc.Contains("StartTime") && doc.Contains("EndTime"))
    {
        try
        {
            // Extract DateTime values
            DateTime startTime = doc["StartTime"].ToUniversalTime();
            DateTime endTime = doc["EndTime"].ToUniversalTime();
            
            // Calculate duration
            TimeSpan duration = endTime - startTime;
            
            // Format appropriately (hh:mm:ss format)
            result["Duration"] = duration.ToString(@"hh\:mm\:ss");
            
            Console.WriteLine($"Calculated Duration from StartTime and EndTime: {result["Duration"]}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating Duration: {ex.Message}");
            result["Duration"] = "";
        }
    }

    return result;
}
